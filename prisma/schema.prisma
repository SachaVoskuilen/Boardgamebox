// Prisma schema file

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider        = "mysql"
  url             = env("DATABASE_URL")
}

// Types
// Like, wishlist, own
model MarkerCategory {
  id                Int         @id @default(autoincrement())
  markerCategory    String
  markers           Marker[]
}

// (List)
model Marker {
  id                  Int                 @id @default(autoincrement())
  boardGameId         String
  user                User                @relation(fields: [userId], references: [id])
  userId              String
  markerCategory      MarkerCategory      @relation(fields: [markerCategoryId], references: [id])
  markerCategoryId    Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Game ratings
model RatingCategory {
  id                Int         @id @default(autoincrement())
  ratingCategory    String
  ratings           Rating[]
}

model Rating {
  id                Int               @id @default(autoincrement())
  boardGameId       String
  user              User              @relation(fields: [userId], references: [id])
  userId            String
  ratingCategory    RatingCategory    @relation(fields: [ratingCategoryId], references: [id])
  ratingCategoryId  Int
  rating            Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// Question and replies
model Question {
  id                  Int                 @id @default(autoincrement())
  boardGameId         String
  user                User                @relation(fields: [userId], references: [id])
  userId              String
  Question            String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  likes               QuestionLikes[]
  replies             QuestionReply[]
}

model QuestionLikes {
  id                  Int                 @id @default(autoincrement())
  user                User                @relation(fields: [userId], references: [id])
  userId              String
  question            Question            @relation(fields: [questionId], references: [id])
  questionId          Int
  createdAt           DateTime            @default(now())
}

model QuestionReply {
  id                  Int                 @id @default(autoincrement())
  user                User                @relation(fields: [userId], references: [id])
  userId              String
  question            Question            @relation(fields: [questionId], references: [id])
  questionId          Int
  reply               String
  likes               ReplyLikes[]
}

model ReplyLikes {
  id                  Int                 @id @default(autoincrement())
  user                User                @relation(fields: [userId], references: [id])
  userId              String
  reply               QuestionReply               @relation(fields: [replyId], references: [id])
  replyId             Int
  createdAt           DateTime            @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  markers       Marker[]
  ratings       Rating[]
  questions     Question[]
  questionLikes QuestionLikes[]
  replies       QuestionReply[]
  replyLikes    ReplyLikes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
